{"version":3,"sources":["weather.es6"],"names":[],"mappings":"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","file":"weather.js","sourcesContent":["/**\n * Class for getting weather data using OpenWeatherMap\n * @see http://openweathermap.org/current\n */\nclass OpenWeatherMap {\n\t/**\n\t * Creates new instance and sets class properties\n\t *\n\t * @param  {string}                   imperial or metric\n\t * @param  {string}                   language code\n\t * @param  {float}                    API version number\n\t */\n\tconstructor(units = 'imperial', lang = 'en', version = 2.5) {\n\t\tthis.url = new URL(`http://api.openweathermap.org/data/${version}/weather`);\n\t\tthis.url.searchParams.set('units', units);\n\t\tthis.url.searchParams.set('lang', lang);\n\t\tthis.units = {};\n\t\tif (units === 'imperial') {\n\t\t\tthis.units.temp = 'F';\n\t\t\tthis.units.speed = 'MPH'\n\t\t} else if (units === 'metric') {\n\t\t\tthis.units.temp = 'C';\n\t\t\tthis.untis.speed = 'K/H';\n\t\t}\n\t}\n\n\t/**\n\t * Get weather using GeoLocation API\n\t *\n\t * @param  {callable} callback     Callback to call with response\n\t *\n\t * @return {void}\n\t */\n\tgetFromCoords(callback = data => {console.log(data)}) {\n\t\tOpenWeatherMap.getLocation().then(location => {\n\t\t\tthis.url.searchParams.set('lat', location.coords.latitude);\n\t\t\tthis.url.searchParams.set('lon', location.coords.longitude);\n\t\t\tfetch(this.url, {\n\t\t\t\tmethod: 'GET',\n\t\t\t\tmode: 'cors'\n\t\t\t}).then(resp =>  this.parseResponse(resp)).then(callback);\n\t\t}).catch(err => {\n\t\t\tconsole.error(err);\n\t\t});\n\t}\n\n\t/**\n\t * Get weather using city name\n\t *\n\t * @param  {string}   city             City name to get weather for\n\t * @param  {callable} callback         Callback to call with response\n\t *\n\t * @return {void}\n\t */\n\tgetFromCity(city, callback = data => console.log(data)) {\n\t\tthis.url.searchParams.set('q', city);\n\t\tfetch(this.url, {\n\t\t\tmethod: 'GET',\n\t\t\tmode: 'cors'\n\t\t}).then(resp =>  this.parseResponse(resp)).then(callback).catch(err => {\n\t\t\tconsole.error(err);\n\t\t});\n\t}\n\n\t/**\n\t * Get weather from zip code\n\t *\n\t * @param  {integer}  zip      Zip code\n\t * @param  {[type]}   callback Callback to call with response\n\t *\n\t * @return {void}\n\t */\n\tgetFromZip(zip, callback = data => console.log(data)) {\n\t\tthis.url.searchParams.set('zip', `${zip},us`);\n\t\tfetch(this.url, {\n\t\t\tmethod: 'GET',\n\t\t\tmode: 'cors'\n\t\t}).then(resp =>  this.parseResponse(resp)).then(callback).catch(err => {\n\t\t\tconsole.error(err);\n\t\t});\n\t}\n\n\t/**\n\t * Get weather from city ID\n\t *\n\t * @param  {integer} id       City ID number\n\t * @param  {[type]}  callback Callback to call with response\n\t *\n\t * @return {void}\n\t */\n\tgetFromID(id, callback = data => console.log(data)) {\n\t\tthis.url.searchParams.set('id', id);\n\t\tfetch(this.url, {\n\t\t\tmethod: 'GET',\n\t\t\tmode: 'cors'\n\t\t}).then(resp =>  this.parseResponse(resp)).then(callback).catch(err => {\n\t\t\tconsole.error(err);\n\t\t});\n\t}\n\n\t/**\n\t * Get icon for current weather\n\t *\n\t * @param  {Object} weather An element from the weather array from response\n\t *\n\t * @return {Image}          <img src=\"...\" alt=\"...\" width=\"50\" height=\"50\">\n\t */\n\tstatic getIcon(weather) {\n\t\tlet img = new Image(50, 50);\n\t\timg.src = `http://openweathermap.org/img/w/${weather.icon}.png`;\n\t\timg.alt = weather.description;\n\t\treturn img;\n\t}\n\n\t/**\n\t * Parse response from fetch request\n\t *\n\t * @param  {Response} resp Reponse object from fetch\n\t *\n\t * @return {void}\n\t */\n\tparseResponse(resp) {\n\t\tif (resp.ok) {\n\t\t\tlet type = resp.headers.get('Content-Type').toLowerCase();\n\t\t\tif (type.startsWith('application/json')) {\n\t\t\t\treturn resp.json();\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Unsupported Content-Type: \"${type}\"`);\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error(`<${this.url.origin}> ${resp.status}: ${resp.statusText}`);\n\t\t}\n\t}\n\n\t/**\n\t * Static method to get location using GeoLocation API\n\t *\n\t * @param  {object} options    GeoLocation options object\n\t *\n\t * @return {Promise}           A promise which resolves with GeoLocation coords\n\t */\n\tstatic getLocation(options = {}) {\n\t\treturn new Promise(function(success, fail) {\n\t\t\tif (!('geolocation' in navigator)) {\n\t\t\t\tfail('Your browser does not support GeoLocation');\n\t\t\t}\n\t\t\tnavigator.geolocation.getCurrentPosition(success, fail, options);\n\t\t});\n\t}\n}\n"]}